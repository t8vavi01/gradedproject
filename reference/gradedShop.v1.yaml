openapi: 3.0.0
info:
  title: gradedShop
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /registration:
    post:
      summary: ''
      operationId: post-registration
      responses:
        '201':
          description: User created succesfully!
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: integer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorDescription:
                    type: string
              examples:
                example-1:
                  value:
                    '': string
      description: This endpoint is used to create an user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                birthDate:
                  type: string
                  description: ISO 8601
                eMail:
                  type: string
                  format: email
                userName:
                  type: string
                passWord:
                  type: string
                  format: password
              required:
                - fullName
                - birthDate
                - eMail
                - userName
                - passWord
            examples:
              example-1:
                value:
                  fullName: Name Namersson
                  birthDate: '2020-10-06'
                  eMail: example@examplemail.com
                  userName: NamNam
                  passWord: examplePassWord
  /posting:
    post:
      summary: ''
      operationId: post-posting
      responses:
        '201':
          description: Posting created succesfully!
          content:
            application/json:
              schema:
                type: object
                properties:
                  postingID:
                    type: integer
        '400':
          description: Bad Request
      description: Create a new posting
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                category:
                  type: string
                images:
                  type: object
                  properties:
                    imageOne:
                      type: object
                    imageTwo:
                      type: object
                    imageThree:
                      type: object
                    imageFour:
                      type: object
                askingPrice:
                  type: number
                postDate:
                  type: string
                  description: ISO 8601
                location:
                  type: object
                  required:
                    - town
                    - country
                    - address
                    - zipCode
                  properties:
                    town:
                      type: string
                    country:
                      type: string
                    address:
                      type: string
                    zipCode:
                      type: string
                deliveryType:
                  type: string
                seller:
                  type: object
                  required:
                    - sellerName
                    - eMail
                    - phoneNumber
                  properties:
                    sellerName:
                      type: string
                    eMail:
                      type: string
                      format: email
                    phoneNumber:
                      type: string
              required:
                - title
                - description
                - category
                - askingPrice
                - postDate
                - location
                - deliveryType
                - seller
            examples:
              example-1:
                value:
                  title: string
                  description: string
                  category: string
                  images:
                    imageOne: {}
                    imageTwo: {}
                    imageThree: {}
                    imageFour: {}
                  askingPrice: 0
                  postDate: '2020-10-06'
                  location:
                    town: string
                    country: string
                    address: string
                    zipCode: string
                  deliveryType: string
                  seller:
                    sellerName: string
                    eMail: string
                    phoneNumber: string
    put:
      summary: ''
      operationId: put-posting
      responses:
        '200':
          description: Edits were made succesfully
      description: In this endpoint you can edit the information of your posting
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                category:
                  type: string
                images:
                  type: object
                  properties:
                    imageOne:
                      type: object
                    imageTwo:
                      type: object
                    imageThree:
                      type: object
                    imageFour:
                      type: object
                askingPrice:
                  type: number
                postDate:
                  type: string
                  description: ISO 8601
                location:
                  type: object
                  properties:
                    town:
                      type: string
                    country:
                      type: string
                    address:
                      type: string
                    zipCode:
                      type: string
                deliveryType:
                  type: string
                seller:
                  type: object
                  properties:
                    sellerName:
                      type: string
                    eMail:
                      type: string
                      format: email
                    phoneNumber:
                      type: string
            examples:
              example-1:
                value:
                  title: string
                  description: string
                  category: string
                  images:
                    imageOne: {}
                    imageTwo: {}
                    imageThree: {}
                    imageFour: {}
                  askingPrice: 0
                  postDate: '2020-10-06'
                  location:
                    town: string
                    country: string
                    address: string
                    zipCode: string
                  deliveryType: string
                  seller:
                    sellerName: string
                    eMail: user@example.com
                    phoneNumber: string
  '/posting/{postingID}':
    delete:
      summary: ''
      operationId: delete-posting
      responses:
        '200':
          description: Succesfully deleted!
      description: Delete a posting
      security:
        - HTTPBasic: []
    parameters:
      - schema:
          type: string
        name: postingID
        in: path
        required: true
  /posting/search:
    get:
      summary: Search posts
      tags: []
      responses:
        '200':
          description: Search ended succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  description:
                    type: string
                  category:
                    type: string
                  images:
                    type: object
                    properties:
                      imageOne:
                        type: string
                      imageTwo:
                        type: string
                      imageThree:
                        type: string
                      imageFour:
                        type: string
                  askingPrice:
                    type: number
                  postDate:
                    type: string
                  location:
                    type: object
                    properties:
                      town:
                        type: string
                      country:
                        type: string
                      address:
                        type: string
                      zipCode:
                        type: string
                  deliveryType:
                    type: string
                  seller:
                    type: object
                    properties:
                      sellerName:
                        type: string
                      eMail:
                        type: string
                        format: email
                      address:
                        type: string
        '404':
          description: Your search result did not match any existing posting
      operationId: get-posting-search
      description: Search posts made
      parameters:
        - schema:
            type: string
          in: query
          name: category
        - schema:
            type: string
          in: query
          name: date
        - schema: {}
          in: query
          name: location
  /login:
    get:
      summary: Login
      tags: []
      responses: {}
      operationId: get-login
    post:
      summary: ''
      operationId: post-login
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      description: Enpoint used to log in with username and password
      security:
        - HTTPBasic: []
components:
  schemas: {}
  securitySchemes:
    HTTPBasic:
      type: http
      scheme: basic
